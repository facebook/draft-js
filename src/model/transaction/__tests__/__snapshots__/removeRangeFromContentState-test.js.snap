// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`must remove blocks entirely within the selection 1`] = `
Immutable.OrderedMap {
  "a": Immutable.Record {
    "key": "a",
    "type": "unstyled",
    "text": "Alpt",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "d": Immutable.Record {
    "key": "d",
    "type": "code-block",
    "text": "",
    "characterList": Immutable.List [],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "e": Immutable.Record {
    "key": "e",
    "type": "code-block",
    "text": "",
    "characterList": Immutable.List [],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "f": Immutable.Record {
    "key": "f",
    "type": "blockquote",
    "text": "Charlie",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
    ],
    "depth": 0,
    "data": Immutable.Map {},
  },
}
`;

exports[`must remove from the beginning of the block 1`] = `
Immutable.OrderedMap {
  "a": Immutable.Record {
    "key": "a",
    "type": "unstyled",
    "text": "ha",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "b": Immutable.Record {
    "key": "b",
    "type": "unordered-list-item",
    "text": "Bravo",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "BOLD",
        ],
        "entity": "1",
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "BOLD",
        ],
        "entity": "1",
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "BOLD",
        ],
        "entity": "1",
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "BOLD",
        ],
        "entity": "1",
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "BOLD",
        ],
        "entity": "1",
      },
    ],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "c": Immutable.Record {
    "key": "c",
    "type": "code-block",
    "text": "Test",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "d": Immutable.Record {
    "key": "d",
    "type": "code-block",
    "text": "",
    "characterList": Immutable.List [],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "e": Immutable.Record {
    "key": "e",
    "type": "code-block",
    "text": "",
    "characterList": Immutable.List [],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "f": Immutable.Record {
    "key": "f",
    "type": "blockquote",
    "text": "Charlie",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
    ],
    "depth": 0,
    "data": Immutable.Map {},
  },
}
`;

exports[`must remove from the end of A to the end of B 1`] = `
Immutable.OrderedMap {
  "a": Immutable.Record {
    "key": "a",
    "type": "unstyled",
    "text": "Alpha",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "c": Immutable.Record {
    "key": "c",
    "type": "code-block",
    "text": "Test",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "d": Immutable.Record {
    "key": "d",
    "type": "code-block",
    "text": "",
    "characterList": Immutable.List [],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "e": Immutable.Record {
    "key": "e",
    "type": "code-block",
    "text": "",
    "characterList": Immutable.List [],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "f": Immutable.Record {
    "key": "f",
    "type": "blockquote",
    "text": "Charlie",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
    ],
    "depth": 0,
    "data": Immutable.Map {},
  },
}
`;

exports[`must remove from the end of A to the start of B 1`] = `
Immutable.OrderedMap {
  "a": Immutable.Record {
    "key": "a",
    "type": "unstyled",
    "text": "AlphaBravo",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "BOLD",
        ],
        "entity": "1",
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "BOLD",
        ],
        "entity": "1",
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "BOLD",
        ],
        "entity": "1",
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "BOLD",
        ],
        "entity": "1",
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "BOLD",
        ],
        "entity": "1",
      },
    ],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "c": Immutable.Record {
    "key": "c",
    "type": "code-block",
    "text": "Test",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "d": Immutable.Record {
    "key": "d",
    "type": "code-block",
    "text": "",
    "characterList": Immutable.List [],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "e": Immutable.Record {
    "key": "e",
    "type": "code-block",
    "text": "",
    "characterList": Immutable.List [],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "f": Immutable.Record {
    "key": "f",
    "type": "blockquote",
    "text": "Charlie",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
    ],
    "depth": 0,
    "data": Immutable.Map {},
  },
}
`;

exports[`must remove from the end of A to within B 1`] = `
Immutable.OrderedMap {
  "a": Immutable.Record {
    "key": "a",
    "type": "unstyled",
    "text": "Alphavo",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "BOLD",
        ],
        "entity": "1",
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "BOLD",
        ],
        "entity": "1",
      },
    ],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "c": Immutable.Record {
    "key": "c",
    "type": "code-block",
    "text": "Test",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "d": Immutable.Record {
    "key": "d",
    "type": "code-block",
    "text": "",
    "characterList": Immutable.List [],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "e": Immutable.Record {
    "key": "e",
    "type": "code-block",
    "text": "",
    "characterList": Immutable.List [],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "f": Immutable.Record {
    "key": "f",
    "type": "blockquote",
    "text": "Charlie",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
    ],
    "depth": 0,
    "data": Immutable.Map {},
  },
}
`;

exports[`must remove from the start of A to the end of B 1`] = `
Immutable.OrderedMap {
  "a": Immutable.Record {
    "key": "a",
    "type": "unstyled",
    "text": "",
    "characterList": Immutable.List [],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "c": Immutable.Record {
    "key": "c",
    "type": "code-block",
    "text": "Test",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "d": Immutable.Record {
    "key": "d",
    "type": "code-block",
    "text": "",
    "characterList": Immutable.List [],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "e": Immutable.Record {
    "key": "e",
    "type": "code-block",
    "text": "",
    "characterList": Immutable.List [],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "f": Immutable.Record {
    "key": "f",
    "type": "blockquote",
    "text": "Charlie",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
    ],
    "depth": 0,
    "data": Immutable.Map {},
  },
}
`;

exports[`must remove from the start of A to the start of B 1`] = `
Immutable.OrderedMap {
  "a": Immutable.Record {
    "key": "a",
    "type": "unstyled",
    "text": "Bravo",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "BOLD",
        ],
        "entity": "1",
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "BOLD",
        ],
        "entity": "1",
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "BOLD",
        ],
        "entity": "1",
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "BOLD",
        ],
        "entity": "1",
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "BOLD",
        ],
        "entity": "1",
      },
    ],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "c": Immutable.Record {
    "key": "c",
    "type": "code-block",
    "text": "Test",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "d": Immutable.Record {
    "key": "d",
    "type": "code-block",
    "text": "",
    "characterList": Immutable.List [],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "e": Immutable.Record {
    "key": "e",
    "type": "code-block",
    "text": "",
    "characterList": Immutable.List [],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "f": Immutable.Record {
    "key": "f",
    "type": "blockquote",
    "text": "Charlie",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
    ],
    "depth": 0,
    "data": Immutable.Map {},
  },
}
`;

exports[`must remove from the start of A to within B 1`] = `
Immutable.OrderedMap {
  "a": Immutable.Record {
    "key": "a",
    "type": "unstyled",
    "text": "vo",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "BOLD",
        ],
        "entity": "1",
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "BOLD",
        ],
        "entity": "1",
      },
    ],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "c": Immutable.Record {
    "key": "c",
    "type": "code-block",
    "text": "Test",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "d": Immutable.Record {
    "key": "d",
    "type": "code-block",
    "text": "",
    "characterList": Immutable.List [],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "e": Immutable.Record {
    "key": "e",
    "type": "code-block",
    "text": "",
    "characterList": Immutable.List [],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "f": Immutable.Record {
    "key": "f",
    "type": "blockquote",
    "text": "Charlie",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
    ],
    "depth": 0,
    "data": Immutable.Map {},
  },
}
`;

exports[`must remove from within A to the end of B 1`] = `
Immutable.OrderedMap {
  "a": Immutable.Record {
    "key": "a",
    "type": "unstyled",
    "text": "Alp",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "c": Immutable.Record {
    "key": "c",
    "type": "code-block",
    "text": "Test",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "d": Immutable.Record {
    "key": "d",
    "type": "code-block",
    "text": "",
    "characterList": Immutable.List [],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "e": Immutable.Record {
    "key": "e",
    "type": "code-block",
    "text": "",
    "characterList": Immutable.List [],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "f": Immutable.Record {
    "key": "f",
    "type": "blockquote",
    "text": "Charlie",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
    ],
    "depth": 0,
    "data": Immutable.Map {},
  },
}
`;

exports[`must remove from within A to the start of B 1`] = `
Immutable.OrderedMap {
  "a": Immutable.Record {
    "key": "a",
    "type": "unstyled",
    "text": "AlpBravo",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "BOLD",
        ],
        "entity": "1",
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "BOLD",
        ],
        "entity": "1",
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "BOLD",
        ],
        "entity": "1",
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "BOLD",
        ],
        "entity": "1",
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "BOLD",
        ],
        "entity": "1",
      },
    ],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "c": Immutable.Record {
    "key": "c",
    "type": "code-block",
    "text": "Test",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "d": Immutable.Record {
    "key": "d",
    "type": "code-block",
    "text": "",
    "characterList": Immutable.List [],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "e": Immutable.Record {
    "key": "e",
    "type": "code-block",
    "text": "",
    "characterList": Immutable.List [],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "f": Immutable.Record {
    "key": "f",
    "type": "blockquote",
    "text": "Charlie",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
    ],
    "depth": 0,
    "data": Immutable.Map {},
  },
}
`;

exports[`must remove from within A to within B 1`] = `
Immutable.OrderedMap {
  "a": Immutable.Record {
    "key": "a",
    "type": "unstyled",
    "text": "Alpvo",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "BOLD",
        ],
        "entity": "1",
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "BOLD",
        ],
        "entity": "1",
      },
    ],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "c": Immutable.Record {
    "key": "c",
    "type": "code-block",
    "text": "Test",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "d": Immutable.Record {
    "key": "d",
    "type": "code-block",
    "text": "",
    "characterList": Immutable.List [],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "e": Immutable.Record {
    "key": "e",
    "type": "code-block",
    "text": "",
    "characterList": Immutable.List [],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "f": Immutable.Record {
    "key": "f",
    "type": "blockquote",
    "text": "Charlie",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
    ],
    "depth": 0,
    "data": Immutable.Map {},
  },
}
`;

exports[`must remove from within the block 1`] = `
Immutable.OrderedMap {
  "a": Immutable.Record {
    "key": "a",
    "type": "unstyled",
    "text": "Ala",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "b": Immutable.Record {
    "key": "b",
    "type": "unordered-list-item",
    "text": "Bravo",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "BOLD",
        ],
        "entity": "1",
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "BOLD",
        ],
        "entity": "1",
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "BOLD",
        ],
        "entity": "1",
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "BOLD",
        ],
        "entity": "1",
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "BOLD",
        ],
        "entity": "1",
      },
    ],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "c": Immutable.Record {
    "key": "c",
    "type": "code-block",
    "text": "Test",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "d": Immutable.Record {
    "key": "d",
    "type": "code-block",
    "text": "",
    "characterList": Immutable.List [],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "e": Immutable.Record {
    "key": "e",
    "type": "code-block",
    "text": "",
    "characterList": Immutable.List [],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "f": Immutable.Record {
    "key": "f",
    "type": "blockquote",
    "text": "Charlie",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
    ],
    "depth": 0,
    "data": Immutable.Map {},
  },
}
`;

exports[`must remove to the end of the block 1`] = `
Immutable.OrderedMap {
  "a": Immutable.Record {
    "key": "a",
    "type": "unstyled",
    "text": "Alp",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "b": Immutable.Record {
    "key": "b",
    "type": "unordered-list-item",
    "text": "Bravo",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "BOLD",
        ],
        "entity": "1",
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "BOLD",
        ],
        "entity": "1",
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "BOLD",
        ],
        "entity": "1",
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "BOLD",
        ],
        "entity": "1",
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "BOLD",
        ],
        "entity": "1",
      },
    ],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "c": Immutable.Record {
    "key": "c",
    "type": "code-block",
    "text": "Test",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "d": Immutable.Record {
    "key": "d",
    "type": "code-block",
    "text": "",
    "characterList": Immutable.List [],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "e": Immutable.Record {
    "key": "e",
    "type": "code-block",
    "text": "",
    "characterList": Immutable.List [],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "f": Immutable.Record {
    "key": "f",
    "type": "blockquote",
    "text": "Charlie",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
    ],
    "depth": 0,
    "data": Immutable.Map {},
  },
}
`;

exports[`must return the input ContentState if selection is collapsed 1`] = `
Immutable.OrderedMap {
  "a": Immutable.Record {
    "key": "a",
    "type": "unstyled",
    "text": "Alpha",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "b": Immutable.Record {
    "key": "b",
    "type": "unordered-list-item",
    "text": "Bravo",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "BOLD",
        ],
        "entity": "1",
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "BOLD",
        ],
        "entity": "1",
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "BOLD",
        ],
        "entity": "1",
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "BOLD",
        ],
        "entity": "1",
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "BOLD",
        ],
        "entity": "1",
      },
    ],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "c": Immutable.Record {
    "key": "c",
    "type": "code-block",
    "text": "Test",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "d": Immutable.Record {
    "key": "d",
    "type": "code-block",
    "text": "",
    "characterList": Immutable.List [],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "e": Immutable.Record {
    "key": "e",
    "type": "code-block",
    "text": "",
    "characterList": Immutable.List [],
    "depth": 0,
    "data": Immutable.Map {},
  },
  "f": Immutable.Record {
    "key": "f",
    "type": "blockquote",
    "text": "Charlie",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [
          "ITALIC",
        ],
        "entity": null,
      },
    ],
    "depth": 0,
    "data": Immutable.Map {},
  },
}
`;
